{"version":3,"sources":["wasm/sploosh_wasm.js","App.js","serviceWorker.js","index.js"],"names":["wasm","cachegetUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","buffer","memory","Uint8Array","set","cachegetUint32Memory0","passArray32ToWasm0","Uint32Array","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","passArrayF64ToWasm0","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayF64FromWasm0","len","subarray","calculate_probabilities_without_sequence","hits","misses","squids_gotten","ptr0","__wbindgen_malloc","len0","ptr1","len1","v2","r0","r1","slice","__wbindgen_free","calculate_probabilities_from_game_history","observed_boards","prior_steps_from_previous_means","prior_steps_from_previous_stddevs","ptr2","len2","ptr3","len3","ptr4","len4","v5","disambiguate_board","undefined","set_board_table","board_table","load","module","imports","a","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","init","input","Request","URL","fetch","exports","__wbindgen_wasm_module","interpolate","require","globalDB","indexedDBreq","window","indexedDB","open","dbWrite","key","value","transaction","onerror","event","alert","objectStore","add","dbRead","Promise","resolve","reject","request","onsuccess","target","result","errorCode","onupgradeneeded","createObjectStore","colormap","naturalsUpTo","n","Array","keys","Tile","isBest","this","props","best","x","y","className","valid","backgroundColor","text","prob","style","fontSize","opacity","onClick","toFixed","precision","React","Component","process","globalMap","dbCachedFetch","url","callback","cacheMiss","req","XMLHttpRequest","responseType","onload","evt","response","send","catch","makeBoardIndicesTable","actuallyMakeBoardIndicesTable","descs","direction","push","allBoards","boardIndices","placeSquid","board","desc","i","fill","squid2","squid3","squid4","count","from","index","map","join","generateRandomChar","base58","array","crypto","getRandomValues","generateRandomToken","SPYWARE_HOST","globalSpyware","globalSpywareCounter","sendSpywareEvent","eventData","state","loggedIn","spywareMode","timestamp","Date","getTime","body","JSON","stringify","username","token","session","events","method","setState","charsSent","ok","errors","SpywareModeConfiguration","localStorage","getItem","setItem","defaultUsername","json","log","success","kind","version","bigTable","id","fontFamily","marginLeft","onLogout","data-stop-shortcuts","width","onChange","onLogin","marginTop","trigger","margin","marginRight","href","color","sampleSquid","Math","round","random","cells","cell","newXY","LayoutDrawingBoard","grid","makeEmptyGrid","selectedCell","changeMade","dx","dy","countsBySquid","2","3","4","layoutString","getLayoutString","boardIndex","parent","isSelectedCell","display","BoardTimer","timerStartMS","timerRunning","includesLoadingTheRoom","includedRewardsGotten","invalidated","shortcutsHandler","bind","document","addEventListener","timerID","setInterval","forceUpdate","removeEventListener","clearInterval","performance","now","oldState","delta","max","min","timerStepEstimate","timeDeltaSeconds","prediction","Number","timedTickIntercept","timedTickRate","roomEnteredOffset","getAttribute","ctrlKey","altKey","code","shiftKey","adjustRewards","resetTimer","toggleInvalidated","elapsed","getSecondsElapsed","guessStepsElapsedFromTime","textShadow","defaultConfigurationParams","firstBoardStepsThousands","firstBoardStepsThousandsStdDev","nextBoardStepsThousands","nextBoardStepsThousandsStdDev","timedBoardStepsThousandsStdDev","MainMap","layoutDrawingBoardRefs","createRef","timerRef","makeEmptyState","doComputation","squidsGotten","probs","mode","squidLayout","layout","hitLocations","candidate","isAdmissible","generateLayout","undoBuffer","cursorBelief","observationProb","lastComputationTime","sequenceAware","usingTimer","showKeyShortcuts","potentialMatches","savedSettings","parse","Object","name","configParams","settings","getConfigParams","boardIndexToLayoutString","buf","boardTable","clearField","observedBoards","startIndex","scanRange","soughtBoard","remainingBoards","indexMax","findMatchingLocations","subResult","makeGameHistoryArguments","matches","match","rawObservedBoards","ref","current","ob","priorStepsFromPreviousMeans","priorStepsFromPreviousStdDevs","first","gridValue","numericSquidsGotten","t0","getGridStatistics","gameHistoryArguments","probabilities","maxY","maxX","highestProb","p1","p2","l1Distance","abs","distancePenaltyMultiplier","distanceAdjustedProb","t1","oldValid","didWeConcludeTheSituationWasValid","computationTime","setAsHit","copyToUndoBuffer","oldValue","arr","arrayContains","squid","killed","templateState","newState","undoEntry","pop","oldGrid","boardTimer","startRunning","copyToHistory","numericValue","newGrid","newNumericValue","finalBoard","fillIndex","shiftHistory","setStateFromLayoutString","drawingBoards","clearBoard","toLowerCase","tagName","preventDefault","undoLastMarking","reportMiss","reportHit","incrementKills","splitTimer","justifySelf","usedShots","openingOptimizer","alignSelf","gridTemplateColumns","renderActualMap","type","checked","gridColumn","saveConfigParams","factoryResetConfigParams","diffs","recomputePotentialMatches","loadSequenceTable","App","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.69b64848.chunk.js","sourcesContent":["\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8);\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayF64FromWasm0(ptr, len) {\n    return getFloat64Memory0().subarray(ptr / 8, ptr / 8 + len);\n}\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_without_sequence(hits, misses, squids_gotten) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_without_sequence(8, ptr0, len0, ptr1, len1, squids_gotten);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v2;\n    if (r0 !== 0) {\n        v2 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v2;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities_from_game_history(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities_from_game_history(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v5;\n    if (r0 !== 0) {\n        v5 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v5;\n}\n\n/**\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @param {Uint32Array} observed_boards\n* @param {Uint32Array} prior_steps_from_previous_means\n* @param {Float64Array} prior_steps_from_previous_stddevs\n* @returns {number | undefined}\n*/\nexport function disambiguate_board(hits, misses, squids_gotten, observed_boards, prior_steps_from_previous_means, prior_steps_from_previous_stddevs) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray32ToWasm0(observed_boards, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray32ToWasm0(prior_steps_from_previous_means, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArrayF64ToWasm0(prior_steps_from_previous_stddevs, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    wasm.disambiguate_board(8, ptr0, len0, ptr1, len1, squids_gotten, ptr2, len2, ptr3, len3, ptr4, len4);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n}\n\n/**\n* @param {Uint32Array} board_table\n*/\nexport function set_board_table(board_table) {\n    var ptr0 = passArray32ToWasm0(board_table, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.set_board_table(ptr0, len0);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') !== 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    //if (typeof input === 'undefined') {\n    //    input = import.meta.url.replace(/\\.js$/, '_bg.wasm');\n    //}\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","import React from 'react';\nimport './App.css';\nimport Collapsible from 'react-collapsible';\nimport init, {\n    set_board_table,\n    calculate_probabilities_without_sequence,\n    calculate_probabilities_from_game_history,\n    disambiguate_board,\n} from './wasm/sploosh_wasm.js';\nconst interpolate = require('color-interpolate');\n\nconst VERSION_STRING = 'v0.0.22';\n\nvar globalDB = null;\nconst indexedDBreq = window.indexedDB.open('splooshkaboom', 1);\nindexedDBreq.onerror = function(event) {\n    alert('Could not access IndexedDB. This is usually due to using Private ' +\n          'Browsing in Firefox. The application should still work, but the ' +\n          'tables for Sequence-Aware Mode cannot be saved and must be ' +\n          'redownloaded every time you initialize it.');\n};\n// Known issue: There's basically a race condition here in that I don't\n// wait for this onsuccess to potentially start calling dbRead.\nindexedDBreq.onsuccess = function(event) {\n    globalDB = event.target.result;\n    globalDB.onerror = function(event) {\n        alert('IndexedDB error: ' + event.target.errorCode);\n    };\n};\nindexedDBreq.onupgradeneeded = function(event) {\n    const db = event.target.result;\n    db.createObjectStore('sk');\n}\n\n// TODO: Am I using IndexedDB even remotely correctly!? This looks so weird...\n// Do I not have to somehow end or commit the transactions!?\n\nfunction dbWrite(key, value) {\n    if (globalDB === null)\n        return;\n\n    const transaction = globalDB.transaction(['sk'], 'readwrite');\n\n    transaction.onerror = function(event) {\n        alert('Transaction error!');\n    }\n    transaction.objectStore('sk').add(value, key);\n}\n\nfunction dbRead(key) {\n    return new Promise((resolve, reject) => {\n        const transaction = globalDB.transaction(['sk']);\n\n        transaction.onerror = function(event) {\n            alert('Transaction error!');\n        }\n        const objectStore = transaction.objectStore('sk');\n        const request = objectStore.get(key);\n        request.onsuccess = function(event) {\n            resolve(event.target.result);\n        };\n        request.onerror = function(event) {\n            reject();\n        };\n    });\n}\n\n// .        . . . .\n// 0123456789abcdef\nconst colormap = interpolate(['#004', '#070', '#090', '#0b0', '#0d0', '#0f0', '#6f6']);\nconst naturalsUpTo = (n) => [...Array(n).keys()];\n\nclass Tile extends React.Component {\n    render() {\n        const isBest = this.props.best !== null && this.props.best[0] === this.props.x && this.props.best[1] === this.props.y;\n        let className = 'boardTile' + (this.props.valid ? '' : ' invalid')\n            + (isBest ? ' selected' : '');\n\n        let backgroundColor = this.props.backgroundColor;\n        if (backgroundColor === undefined) {\n            backgroundColor = this.props.text === null ? colormap(this.props.prob) : (\n                this.props.text === 'HIT' ? '#a2a' : '#44a'\n            );\n        }\n\n        return <div className={ className }\n            key={this.props.x + ',' + this.props.y}\n            style={{\n                fontSize: this.props.fontSize,\n                opacity: this.props.opacity,\n                backgroundColor,\n            }}\n            onClick={this.props.onClick}\n        >\n            {this.props.text === null ? (this.props.prob * 100).toFixed(this.props.precision) + '%' : this.props.text}\n        </div>;\n    }\n}\n\nlet wasm = init(process.env.PUBLIC_URL + \"/sploosh_wasm_bg.wasm\");\n\n// Super ugly, please forgive me. :(\nvar globalMap = null;\n\nasync function dbCachedFetch(url, callback) {\n    function cacheMiss() {\n        const req = new XMLHttpRequest();\n        req.open('GET', process.env.PUBLIC_URL + url, true);\n        req.responseType = 'arraybuffer';\n        req.onload = (evt) => {\n            dbWrite(url, req.response);\n            callback(req.response);\n        };\n        req.send();\n        return null;\n    }\n    const result = await dbRead(url).catch(cacheMiss);\n    if (result === undefined) {\n        cacheMiss();\n        return;\n    }\n    // This is sort of an ugly protocol, but if we hit the catch path above\n    // we signal that the callback was already called by returning null.\n    if (result === null)\n        return;\n    callback(result);\n}\n\nasync function makeBoardIndicesTable() {\n    function cacheMiss() {\n        const result = actuallyMakeBoardIndicesTable();\n        dbWrite('boardIndicesTable', result);\n        return result;\n    }\n    const result = await dbRead('boardIndicesTable').catch(cacheMiss);\n    if (result === undefined)\n        return cacheMiss();\n    return result;\n}\n\nfunction actuallyMakeBoardIndicesTable() {\n    // This convention here has to match that in the Rust component and table building C++ exactly!\n    const descs = [];\n    for (let y = 0; y < 8; y++)\n        for (let x = 0; x < 8; x++)\n            for (const direction of [false, true])\n                descs.push({x, y, direction});\n    const allBoards = [];\n    const boardIndices = {};\n    function placeSquid(board, desc, length) {\n        for (let i = 0; i < length; i++) {\n            let {x, y} = desc;\n            if (desc.direction)\n                x += i;\n            else\n                y += i;\n            const index = x + 8 * y;\n            if (x >= 8 || y >= 8)\n                return;\n            board[index] = length;\n        }\n    }\n    const board = new Array(64).fill(0);\n\n    for (const squid2 of descs) {\n        for (const squid3 of descs) {\n            for (const squid4 of descs) {\n                board.fill(0);\n                placeSquid(board, squid2, 2);\n                placeSquid(board, squid3, 3);\n                placeSquid(board, squid4, 4);\n                let count = 0;\n                for (const entry of board)\n                    count += entry\n                if (count !== 2*2 + 3*3 + 4*4)\n                    continue;\n                allBoards.push(Array.from(board));\n            }\n        }\n    }\n    let index = 0;\n    for (const board of allBoards) {\n        boardIndices[board.map((i) => i === 0 ? '.' : i).join('')] = index;\n        index++;\n    }\n    return boardIndices;\n}\n\nfunction generateRandomChar() {\n    const base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    const array = new Uint8Array(1);\n    while (true) {\n        crypto.getRandomValues(array);\n        const index = array[0] & 63;\n        if (index < base58.length)\n            return base58[index];\n    }\n}\n\nfunction generateRandomToken(n) {\n    let result = '';\n    for (let i = 0; i < n; i++)\n        result += generateRandomChar();\n    return result;\n}\n\n// Ugh, maybe later I'll give it a proper domain, and move over to https.\nconst SPYWARE_HOST = 'http://skphonehome.peter.website:1234';\n\nvar globalSpyware = null;\nvar globalSpywareCounter = -1;\n\n// To anyone reading this:\n// I chose the name \"spyware\" to be silly — this is a completely optional opt-in feature to send usage data for analysis.\n// You have to actually explicitly enable the spyware with a checkbox in the GUI, and there's an explanation.\nasync function sendSpywareEvent(eventData) {\n    if (globalSpyware === null || globalMap === null)\n        return;\n    if (!globalSpyware.state.loggedIn)\n        return;\n    if (!globalMap.state.spywareMode)\n        return;\n    eventData.timestamp = (new Date()).getTime() / 1000;\n    globalSpywareCounter++;\n    const body = JSON.stringify({\n        username: globalSpyware.state.username,\n        token: globalSpyware.state.token,\n        session: globalSpyware.session,\n        events: {\n            [globalSpywareCounter]: eventData,\n        },\n    });\n    const response = await fetch(SPYWARE_HOST + '/write', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body,\n    });\n    globalSpyware.setState({charsSent: globalSpyware.state.charsSent + body.length});\n    if (!response.ok)\n        globalSpyware.setState({errors: true});\n}\n\nclass SpywareModeConfiguration extends React.Component {\n    constructor() {\n        super();\n        globalSpyware = this;\n        this.session = generateRandomToken(16);\n        let token = localStorage.getItem('SKToken');\n        if (token === null) {\n            token = generateRandomToken(8);\n            localStorage.setItem('SKToken', token);\n        }\n        let defaultUsername = localStorage.getItem('SKUsername');\n        this.state = {\n            username: defaultUsername === null ? '' : defaultUsername,\n            token,\n            loggedIn: false,\n            errors: false,\n            charsSent: false,\n        };\n    }\n\n    async onLogin() {\n        const username = this.state.username;\n        if (username === '') {\n            alert('Username must be non-empty');\n            return;\n        }\n        const response = await fetch(SPYWARE_HOST + '/login', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                'username': username,\n                'token': this.state.token,\n            }),\n        });\n        const result = await response.json();\n        console.log('Login:', result);\n        if (result.success) {\n            // Stash the username when we successfully log in, as a convenience for the user.\n            localStorage.setItem('SKUsername', username);\n            this.setState({loggedIn: true}, () => {\n                sendSpywareEvent({\n                    kind: 'login',\n                    version: VERSION_STRING,\n                    bigTable: globalMap === null ? null : globalMap.bigTable,\n                });\n            });\n        } else {\n            alert('Bad token! This username might already be taken. If you need to recover your login token contact Peter Schmidt-Nielsen.');\n        }\n    }\n\n    async onLogout() {\n        this.setState({loggedIn: false});\n    }\n\n    render() {\n        return <div id='spywareConfig' className={this.state.loggedIn ? 'logged-in' : undefined}>\n            <span style={{fontSize: '120%'}}>Spyware Mode:</span>\n            <br/>\n            {\n                this.state.loggedIn ?\n                    <>\n                        Logged in as: <span style={{fontFamily: 'monospace', fontSize: '150%'}}>{this.state.username}</span>\n                        <button style={{marginLeft: '20px'}} onClick={() => this.onLogout()}>Logout</button>\n                        <br/>\n                        Events sent: {globalSpywareCounter + 1} &nbsp;&nbsp;&nbsp; Chars sent: {this.state.charsSent}\n                    </> : <>\n                        Username: <input data-stop-shortcuts style={{width: '100px', fontFamily: 'monospace'}} value={this.state.username} onChange={event => this.setState({username: event.target.value})}/>\n                        <button style={{marginLeft: '20px'}} onClick={() => this.onLogin()}>Login</button>\n                    </>\n            }\n            <br/>\n            <div style={{marginTop: '20px'}}>\n                <Collapsible trigger={\n                    <div className=\"clickable\" style={{width: '200px', margin: '0px'}}>\n                        Access Token\n                    </div>\n                }>\n                    Token: <input data-stop-shortcuts style={{width: '120px', marginRight: '20px'}} value={this.state.token} onChange={event => this.setState({token: event.target.value})}/>\n                    <button onClick={() => { localStorage.setItem('SKToken', this.state.token); }}>Update Saved Token</button>\n                    <p>\n                        The above token is generated just for you.\n                        Anyone who has the above token can submit data that will appear on the stats page for your username (so I recommend not showing it on stream).\n                        If you lose access to it you'll have to pick a new username, or ask <a href=\"mailto:schmidtnielsenpeter@gmail.com\">Peter Schmidt-Nielsen</a> to help you recover your access token.\n                        The token is automatically saved between sessions, but might be lost if you clear all your browser history.\n                        I recommend copying this token down somewhere.\n                    </p>\n                </Collapsible>\n            </div>\n            {this.state.errors && <span style={{fontSize: '120%', color: 'red'}}>Spyware reporting error!</span>}\n        </div>;\n    }\n}\n\nfunction sampleSquid(length) {\n    const x = Math.round(Math.random() * 8);\n    const y = Math.round(Math.random() * 8);\n    const direction = Math.random() < 0.5;\n    const cells = [[x, y]];\n    for (let i = 0; i < length - 1; i++) {\n        const cell = cells[cells.length - 1];\n        const newXY = direction ? [cell[0] + 1, cell[1]] : [cell[0], cell[1] + 1];\n        cells.push(newXY);\n    }\n    return cells;\n}\n\nfunction generateLayout() {\n    const layout = {};\n    const hitLocations = {};\n    for (const n of [2, 3, 4]) {\n        while (true) {\n            const candidate = sampleSquid(n);\n            let isAdmissible = true;\n            for (const cell of candidate)\n                if (cell[0] > 7 || cell[1] > 7 || hitLocations[cell] === true)\n                    isAdmissible = false;\n            if (isAdmissible) {\n                layout['squid' + n] = candidate;\n                for (const cell of candidate)\n                    hitLocations[cell] = true;\n                break;\n            }\n        }\n    }\n    return layout;\n}\n\nclass LayoutDrawingBoard extends React.Component {\n    constructor() {\n        super();\n        this.state = { grid: this.makeEmptyGrid(), selectedCell: null };\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = '.';\n        return grid;\n    }\n\n    clearBoard() {\n        this.setState({ grid: this.makeEmptyGrid(), selectedCell: null });\n    }\n\n    onClick(x, y) {\n        if (this.state.selectedCell === null) {\n            this.setState({ selectedCell: [x, y] });\n            return;\n        }\n        const grid = {...this.state.grid};\n        let changeMade = false;\n        for (const length of [2, 3, 4]) {\n            for (const [dx, dy] of [[+1, 0], [0, +1], [-1, 0], [0, -1]]) {\n                if (this.state.selectedCell[0] === x + dx * (length - 1) && this.state.selectedCell[1] === y + dy * (length - 1)) {\n                    // If this squid appears anywhere else, obliterate it.\n                    for (let y = 0; y < 8; y++)\n                        for (let x = 0; x < 8; x++)\n                            if (grid[[x, y]] === '' + length)\n                                grid[[x, y]] = '.';\n                    // Fill in the squid here.\n                    for (let i = 0; i < length; i++)\n                        grid[[x + i * dx, y + i * dy]] = '' + length;\n                    changeMade = true;\n                }\n            }\n        }\n        // If any squid has the wrong count, then totally eliminate it.\n        const countsBySquid = {2: 0, 3: 0, 4: 0, '.': 0};\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                countsBySquid[grid[[x, y]]]++;\n        for (const length of [2, 3, 4])\n            if (countsBySquid[length] !== length)\n                for (let y = 0; y < 8; y++)\n                    for (let x = 0; x < 8; x++)\n                        if (grid[[x, y]] === '' + length)\n                            grid[[x, y]] = '.';\n        if (changeMade)\n            this.setState({ grid });\n        this.setState({ selectedCell: null });\n    }\n\n    getLayoutString() {\n        // Quadratic time, but who cares?\n        let layoutString = '';\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                layoutString += this.state.grid[[x, y]];\n        return layoutString;\n    }\n\n    setStateFromLayoutString(layoutString) {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = layoutString[x + 8 * y];\n        this.setState({grid});\n    }\n\n    render() {\n        const layoutString = this.getLayoutString();\n        let boardIndex = this.props.parent.boardIndices[layoutString];\n        if (boardIndex === undefined) {\n            boardIndex = \"waiting...\";\n        }\n        const isSelectedCell = (x, y) => this.state.selectedCell !== null && x === this.state.selectedCell[0] && y === this.state.selectedCell[1];\n\n        return <div className='historyBoardContainer'>\n            <div className='historyBoard'>\n                {naturalsUpTo(8).map(\n                    (y) => <div key={y} style={{\n                        display: 'flex',\n                    }}>\n                        {naturalsUpTo(8).map(\n                            (x) => <Tile\n                                key={x + ',' + y}\n                                x={x} y={y}\n                                onClick={() => this.onClick(x, y)}\n                                text={this.state.grid[[x, y]]}\n                                valid={true}\n                                best={this.state.selectedCell}\n                                fontSize={'200%'}\n                                opacity={isSelectedCell(x, y) || this.state.grid[[x, y]] !== '.' ? 0.6 : 0.2}\n                                backgroundColor={this.state.grid[[x, y]] === '.' ? undefined : 'green'}\n                            />\n                        )}\n                    </div>\n                )}\n            </div><br/>\n            Squid Layout: {boardIndex}\n        </div>;\n    }\n}\n\nfunction renderYesNo(bool) {\n    return bool ?\n        <span style={{color: 'green', textShadow: '0px 0px 2px white'}}>YES</span> :\n        <span style={{color: 'red', textShadow: '0px 0px 2px white'}}>NO</span>;\n}\n\nclass BoardTimer extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            timerStartMS: 0.0,\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        };\n        this.shortcutsHandler = this.shortcutsHandler.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.shortcutsHandler);\n        this.timerID = setInterval(() => this.forceUpdate(), 66);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.shortcutsHandler);\n        clearInterval(this.timerID);\n    }\n\n    startRunning() {\n        const timerStartMS = performance.now();\n        sendSpywareEvent({kind: 'timer_startRunning', oldState: this.state});\n        this.setState({timerRunning: true, timerStartMS});\n    }\n\n    adjustRewards(delta) {\n        sendSpywareEvent({kind: 'timer_adjustRewards', delta, oldState: this.state});\n        this.setState({includedRewardsGotten: Math.max(0, Math.min(2, this.state.includedRewardsGotten + delta))});\n    }\n\n    toggleInvalidated() {\n        sendSpywareEvent({kind: 'timer_toggleInvalidated', oldState: this.state});\n        this.setState({invalidated: !this.state.invalidated});\n    }\n\n    resetTimer() {\n        sendSpywareEvent({kind: 'timer_resetTimer', oldState: this.state});\n        this.setState({\n            timerRunning: false,\n            includesLoadingTheRoom: true,\n            includedRewardsGotten: 0,\n            invalidated: false,\n        });\n        globalMap.setState({ timerStepEstimate: null });\n    }\n\n    getSecondsElapsed() {\n        if (this.state.timerRunning) {\n            const now = performance.now();\n            return 1e-3 * (now - this.state.timerStartMS);\n        }\n        return 0;\n    }\n\n    guessStepsElapsedFromTime(timeDeltaSeconds) {\n        // I did some linear regressions from real HD Italian runs. I'll put some data up at some point.\n        let prediction = Number(this.props.timedTickIntercept) + Number(this.props.timedTickRate) * timeDeltaSeconds;\n        if (this.state.includesLoadingTheRoom)\n            prediction += -940 + Number(this.props.roomEnteredOffset);\n        prediction += this.state.includedRewardsGotten * 760;\n        return Math.round(prediction);\n    }\n\n    shortcutsHandler(evt) {\n        // Check if the target is an input field that should take precedence over shortcuts.\n        if (evt.target?.getAttribute?.('data-stop-shortcuts'))\n            return;\n\n        if (evt.ctrlKey || evt.altKey)\n            return;\n\n        if (evt.code === 'Comma')\n            if (evt.shiftKey)\n                this.adjustRewards(-1);\n            else\n                this.adjustRewards(+1);\n        if (evt.code === 'Semicolon')\n            if (evt.shiftKey)\n                this.resetTimer();\n            else\n                this.toggleInvalidated();\n    }\n\n    render() {\n        const elapsed = this.getSecondsElapsed();\n        if (this.state.invalidated)\n            return <>\n                <span style={{ fontSize: '150%', fontFamily: 'monospace' }}>TIMER</span>\n                <span style={{ fontSize: '150%', fontFamily: 'monospace' }}>INVALIDATED</span>\n            </>;\n        return <>\n            <span>&nbsp;Seconds elapsed: </span>\n            <span>&nbsp;{elapsed.toFixed(2)}&nbsp;</span>\n            <span>&nbsp;Steps:&nbsp;</span>\n            <span>&nbsp;{this.guessStepsElapsedFromTime(elapsed)}&nbsp;</span>\n            <span>&nbsp;Entered room:</span>\n            <span>&nbsp;{renderYesNo(this.state.includesLoadingTheRoom)}&nbsp;</span>\n            <span>&nbsp;Rewards gotten:&nbsp;</span>\n            <span>&nbsp;{this.state.includedRewardsGotten}&nbsp;</span>\n        </>;\n    }\n}\n\nfunction computeL1Distance(p1, p2) {\n    return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\nconst defaultConfigurationParams = {\n    firstBoardStepsThousands: 500,\n    firstBoardStepsThousandsStdDev: 500,\n    nextBoardStepsThousands: 7,\n    nextBoardStepsThousandsStdDev: 3,\n    timedBoardStepsThousandsStdDev: 0.2,\n    timedTickIntercept: 156,\n    timedTickRate: 252,\n    roomEnteredOffset: 0,\n};\n\nclass MainMap extends React.Component {\n    layoutDrawingBoardRefs = [React.createRef(), React.createRef(), React.createRef()];\n    timerRef = React.createRef();\n\n    constructor() {\n        super();\n        this.state = this.makeEmptyState();\n        globalMap = this;\n        this.shortcutsHandler = this.shortcutsHandler.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.shortcutsHandler);\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.shortcutsHandler);\n    }\n\n    makeEmptyGrid() {\n        const grid = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                grid[[x, y]] = null;\n        return grid;\n    }\n\n    makeEmptyState() {\n        const probs = [];\n        for (let y = 0; y < 8; y++)\n            for (let x = 0; x < 8; x++)\n                probs[[x, y]] = 0.0;\n        // Select a particular layout, for practice mode.\n        const squidLayout = generateLayout();\n        const state = {\n            mode: 'calculator',\n            squidLayout,\n            grid: this.makeEmptyGrid(),\n            squidsGotten: 'unknown',\n            undoBuffer: [],\n            probs,\n            best: [3, 4],\n            cursorBelief: [0, 7],\n            valid: true,\n            observationProb: 1.0,\n            lastComputationTime: -1,\n\n            sequenceAware: false,\n            usingTimer: true,\n            showKeyShortcuts: false,\n            spywareMode: false,\n\n            timerStepEstimate: null,\n\n            potentialMatches: null,\n        };\n        // Load relevant configuration from localStorage.\n        let savedSettings = localStorage.getItem('SKSettings');\n        if (savedSettings === null) {\n            savedSettings = defaultConfigurationParams;\n        } else {\n            // if saved configuration from previous version, use defaults for \n            // any new parameters\n            savedSettings = JSON.parse(savedSettings);\n            for (const name of Object.keys(defaultConfigurationParams)) {\n                if (!(name in savedSettings)){\n                    savedSettings[name] = defaultConfigurationParams[name];\n                }\n            }\n        }\n        const configParams = savedSettings;\n        return {...state, ...configParams};\n    }\n\n    getConfigParams() {\n        const settings = {};\n        for (const name of Object.keys(defaultConfigurationParams))\n            settings[name] = Number(this.state[name]);\n        return settings;\n    }\n\n    saveConfigParams() {\n        const configParams = this.getConfigParams();\n        console.log('Saving config params:', configParams);\n        localStorage.setItem('SKSettings', JSON.stringify(configParams));\n    }\n\n    factoryResetConfigParams() {\n        this.setState(defaultConfigurationParams);\n    }\n\n    async loadSequenceTable(bigTable) {\n        if (this.state.sequenceAware !== false)\n            return;\n        this.bigTable = bigTable;\n        this.setState({ sequenceAware: 'initializing' });\n        this.boardIndices = await makeBoardIndicesTable();\n        this.boardIndexToLayoutString = new Array(Object.keys(this.boardIndices).length);\n        for (const key of Object.keys(this.boardIndices))\n            this.boardIndexToLayoutString[this.boardIndices[key]] = key;\n\n        const tableName = bigTable ? '/board_table_25M.bin' : '/board_table_5M.bin';\n        dbCachedFetch(tableName, (buf) => {\n            this.boardTable = new Uint32Array(buf);\n            // Warning: Do I need to await wasm here first?\n            console.log('Board table length:', this.boardTable.length);\n            set_board_table(this.boardTable);\n            this.setState({ sequenceAware: true, mode: 'calculator' },\n                () => { this.clearField(); }\n            );\n        });\n    }\n\n    *findMatchingLocations(observedBoards, startIndex, scanRange) {\n        // Try to find matches for the next board.\n        const soughtBoard = observedBoards[0];\n        const remainingBoards = observedBoards.slice(1);\n        const boardTable = this.boardTable;\n        const indexMax = Math.min(boardTable.length, startIndex + scanRange);\n        for (let i = startIndex; i < indexMax; i++)\n            if (boardTable[i] === soughtBoard)\n                if (remainingBoards.length > 0)\n                    for (const subResult of this.findMatchingLocations(remainingBoards, i, 100000))\n                        yield [i, ...subResult];\n                else\n                    yield [i];\n    }\n\n    recomputePotentialMatches() {\n        const observedBoards = this.makeGameHistoryArguments()[0];\n        const matches = [];\n        if (observedBoards.length > 0)\n            for (const match of this.findMatchingLocations(observedBoards, 0, 1000000000))\n                matches.push(match);\n        sendSpywareEvent({kind: 'recomputePotentialMatches', matches});\n        this.setState({potentialMatches: matches});\n    }\n\n    makeGameHistoryArguments() {\n        // Figure out how many history boards we have.\n        const rawObservedBoards = this.layoutDrawingBoardRefs\n            .map((ref) => this.boardIndices[ref.current.getLayoutString()]);\n        const observedBoards = [];\n        for (const ob of rawObservedBoards) {\n            if (ob === undefined)\n                break;\n            observedBoards.push(ob);\n        }\n\n        // The optimal thing to do here is to save the sequence of step delta estimates, but to make\n        // the tool less fragile we only use our timer-based estimates for the very final mean.\n\n        const priorStepsFromPreviousMeans = [];\n        const priorStepsFromPreviousStdDevs = [];\n        let first = true;\n        for (const index of [...observedBoards, null]) {\n            if (index === undefined)\n                break;\n            if (first) {\n                priorStepsFromPreviousMeans.push(1000.0 * Number(this.state.firstBoardStepsThousands));\n                priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.firstBoardStepsThousandsStdDev));\n            } else {\n                // If we're the last delta, and also not the first, then possibly use our time delta.\n                if (index === null && this.state.timerStepEstimate !== null && this.state.usingTimer) {\n                    // Because the timerStepEstimate can be negative I have to avoid underflow.\n                    priorStepsFromPreviousMeans.push(Math.max(0, this.state.timerStepEstimate));\n                    priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.timedBoardStepsThousandsStdDev));\n                } else {\n                    priorStepsFromPreviousMeans.push(1000.0 * Number(this.state.nextBoardStepsThousands));\n                    priorStepsFromPreviousStdDevs.push(1000.0 * Number(this.state.nextBoardStepsThousandsStdDev));\n                }\n            }\n            first = false;\n        }\n        return [\n            Uint32Array.from(observedBoards),\n            Uint32Array.from(priorStepsFromPreviousMeans),\n            Float64Array.from(priorStepsFromPreviousStdDevs),\n        ];\n    }\n\n    getGridStatistics(grid, squidsGotten) {\n        const hits = [];\n        const misses = [];\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                const gridValue = grid[[x, y]];\n                if (gridValue === 'HIT')\n                    hits.push(8 * y + x);\n                if (gridValue === 'MISS')\n                    misses.push(8 * y + x);\n            }\n        }\n        let numericSquidsGotten = -1;\n        for (const n of ['0', '1', '2', '3'])\n            if (squidsGotten === n || squidsGotten === Number(n))\n                numericSquidsGotten = Number(n);\n        return {hits, misses, numericSquidsGotten};\n    }\n\n    async doComputation(grid, squidsGotten) {\n        console.log('Doing computation:', squidsGotten, grid);\n        const t0 = performance.now();\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(grid, squidsGotten);\n\n        await wasm;\n        let probabilities;\n        let gameHistoryArguments = null;\n        if (this.state.sequenceAware === true) {\n            gameHistoryArguments = this.makeGameHistoryArguments();\n            console.log('gameHistoryArguments:', gameHistoryArguments);\n\n            probabilities = calculate_probabilities_from_game_history(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n                ...gameHistoryArguments,\n            );\n        } else {\n            probabilities = calculate_probabilities_without_sequence(\n                Uint8Array.from(hits),\n                Uint8Array.from(misses),\n                numericSquidsGotten,\n            );\n        }\n\n        let valid = true;\n        if (probabilities !== undefined) {\n            let maxY = 0;\n            let maxX = 0;\n            let highestProb = -1;\n            let probs = [];\n\n            // Here we implement our L1 distance bonus heuristic.\n            // The idea is that we want to highlight a square that isn't too far from where\n            // the player last adjusted the board. (i.e. where we believe their cursor is.)\n            for (let y = 0; y < 8; y++) {\n                for (let x = 0; x < 8; x++) {\n                    probs[[x, y]] = probabilities[8 * y + x];\n                    const l1Distance = computeL1Distance(this.state.cursorBelief, [x, y]);\n                    const distancePenaltyMultiplier = 1 - 0.03 * l1Distance;\n                    const distanceAdjustedProb = probabilities[8 * y + x] * distancePenaltyMultiplier;\n                    if (grid[[x, y]] === null && distanceAdjustedProb > highestProb) {\n                        highestProb = distanceAdjustedProb;\n                        maxX = x;\n                        maxY = y;\n                    }\n                }\n            }\n            const observationProb = probabilities[64];\n            this.setState({ probs, best: highestProb > 0 ? [maxX, maxY] : null, valid, observationProb });\n        } else {\n            valid = false;\n            this.setState({ valid, best: null });\n        }\n        const t1 = performance.now();\n        this.setState({lastComputationTime: t1 - t0});\n        // Send a really big payload.\n        sendSpywareEvent({\n            kind: 'doComputation',\n            grid, hits, misses, numericSquidsGotten,\n            oldValid: this.state.valid,\n            didWeConcludeTheSituationWasValid: valid,\n            probabilities: Array.from(probabilities ?? []),\n            sequenceAware: this.state.sequenceAware,\n            usingTimer: this.state.usingTimer,\n            gameHistoryArguments: (gameHistoryArguments === null) ? [] : gameHistoryArguments.map(a => Array.from(a)),\n            timerStepEstimate: this.state.timerStepEstimate,\n            computationTime: (t1 - t0) / 1000,\n            configParams: this.getConfigParams(),\n        });\n    }\n\n    copyToUndoBuffer() {\n        this.setState({undoBuffer: [\n            ...this.state.undoBuffer,\n            {grid: this.state.grid, squidsGotten: this.state.squidsGotten, cursorBelief: this.state.cursorBelief},\n        ]});\n    }\n\n    onClick(x, y, setAsHit) {\n        sendSpywareEvent({kind: 'onClick', x, y, setAsHit});\n        const grid = { ...this.state.grid };\n        let gridValue = grid[[x, y]];\n        let squidsGotten = this.state.squidsGotten;\n        this.copyToUndoBuffer();\n\n        if (this.state.mode === 'calculator') {\n            const oldValue = gridValue;\n            switch (gridValue) {\n                case 'MISS':\n                    gridValue = 'HIT';\n                    break;\n                case 'HIT':\n                    gridValue = null;\n                    break;\n                default:\n                    gridValue = setAsHit ? 'HIT' : 'MISS';\n                    break;\n            }\n            grid[[x, y]] = gridValue;\n            // Manage the third kill so that users don't have to think about it.\n            // First, check that the number of hits changed.\n            if (gridValue === 'HIT' || oldValue === 'HIT') {\n                // Don't change kills from unknown, even if we are certain of the value.\n                if (squidsGotten !== 'unknown') {\n                    // Only change squid count when the user changes from 8 to 9\n                    // or 9 to 8 for the most consistent experience. (This works\n                    // in combination with the check that hits changed.)\n                    const {hits} = this.getGridStatistics(grid, squidsGotten);\n                    squidsGotten = hits.length === 9 ? '3'\n                                 : hits.length === 8 && oldValue === 'HIT' ? '2'\n                                 : squidsGotten;\n                }\n            }\n        } else {\n            // Determine from the random layout.\n            if (gridValue !== null)\n                return;\n            const arrayContains = (arr) => {\n                for (const cell of arr)\n                    if (cell[0] === x && cell[1] === y)\n                        return true;\n                return false;\n            }\n            if (arrayContains([...this.state.squidLayout.squid2, ...this.state.squidLayout.squid3, ...this.state.squidLayout.squid4])) {\n                gridValue = 'HIT';\n            } else {\n                gridValue = 'MISS';\n            }\n            grid[[x, y]] = gridValue;\n            // Compute the killed squid count.\n            squidsGotten = 0;\n            for (const n of ['2', '3', '4']) {\n                const squid = this.state.squidLayout['squid' + n];\n                let killed = true;\n                for (const cell of squid)\n                    if (grid[cell] !== 'HIT')\n                        killed = false;\n                squidsGotten += killed;\n            }\n        }\n        this.setState({ grid, cursorBelief: [x, y], squidsGotten });\n        this.doComputation(grid, squidsGotten);\n    }\n\n    clearField() {\n        sendSpywareEvent({kind: 'clearField'});\n        const templateState = this.makeEmptyState();\n        const newState = {};\n        for (const name of ['squidLayout', 'grid', 'squidsGotten', 'undoBuffer', 'cursorBelief'])\n            newState[name] = templateState[name];\n        // The squidsGotten value of 'unknown' is banned in sequence-aware mode.\n        if (this.state.sequenceAware)\n            newState.squidsGotten = '0';\n        this.setState(newState);\n        this.doComputation(newState.grid, newState.squidsGotten);\n    }\n\n    undoLastMarking() {\n        const undoBuffer = [...this.state.undoBuffer];\n        if (undoBuffer.length === 0)\n            return;\n        const undoEntry = undoBuffer.pop();\n        sendSpywareEvent({kind: 'undoLastMarking', undoEntry});\n        this.setState({grid: undoEntry.grid, squidsGotten: undoEntry.squidsGotten, cursorBelief: undoEntry.cursorBelief, undoBuffer});\n        this.doComputation(undoEntry.grid, undoEntry.squidsGotten);\n    }\n\n    reportMiss() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportMiss', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best);\n        }\n    }\n\n    reportHit() {\n        if (this.state.best !== null && this.state.grid[this.state.best] === null) {\n            sendSpywareEvent({kind: 'reportHit', best: this.state.best, oldGrid: this.state.grid});\n            this.onClick(...this.state.best, true);\n        }\n    }\n\n    async splitTimer() {\n        const boardTimer = this.timerRef.current;\n        let timerStepEstimate;\n        if (boardTimer !== null) {\n            const elapsed = boardTimer.getSecondsElapsed();\n            // If the timer hasn't been started yet, the purpose of this\n            // function call was to start it, not to actually split.\n            if (elapsed === 0.0 && !boardTimer.state.invalidated) {\n                boardTimer.startRunning();\n                return;\n            }\n            const timerStartMS = performance.now();\n            timerStepEstimate = boardTimer.state.invalidated ? null : boardTimer.guessStepsElapsedFromTime(elapsed);\n\n            console.log('Timer step estimate:', timerStepEstimate);\n            sendSpywareEvent({ kind: 'splitTimer', invalidated: boardTimer.state.invalidated, timerStepEstimate: timerStepEstimate, elapsed });\n            boardTimer.setState({\n                timerStartMS,\n                // After the first split we're no longer loading the room.\n                includesLoadingTheRoom: false,\n                includedRewardsGotten: 0,\n                timerRunning: true,\n                invalidated: false,\n            });\n        }\n        // Automatically copy board to history if it is unambiguous.\n        if (await this.copyToHistory()) {\n            const squidsGotten = '0';\n            const grid = this.makeEmptyGrid();\n            // TODO: Allow undoing across completions.\n            this.setState({\n                    timerStepEstimate,\n                    undoBuffer: [],\n                    cursorBelief: [0, 7],\n                    grid,\n                    squidsGotten,\n                }, () => {\n                    // The copy to history should be done by now, even if it\n                    // got batched together with this setState.\n                    this.doComputation(grid, squidsGotten);\n            });\n        } else if (timerStepEstimate !== undefined) {\n            // There are still things to update, even if not finishing a board.\n            this.setState({ timerStepEstimate }, () => {\n                this.doComputation(this.state.grid, this.state.squidsGotten);\n            });\n        }\n    }\n\n    incrementKills() {\n        let numericValue = this.state.squidsGotten === 'unknown' ? 0 : Number(this.state.squidsGotten);\n        let grid = this.state.grid;\n        if (numericValue < 3) {\n            this.copyToUndoBuffer();\n            numericValue++;\n            this.setState({ squidsGotten: '' + numericValue });\n            this.doComputation(grid, '' + numericValue);\n        }\n        sendSpywareEvent({ kind: 'incrementKills', oldGrid: grid, newGrid: grid, newNumericValue: numericValue });\n    }\n\n    async copyToHistory(gameHistoryArguments) {\n        if (this.state.sequenceAware !== true)\n            return;\n        const {hits, misses, numericSquidsGotten} = this.getGridStatistics(this.state.grid, this.state.squidsGotten);\n        if (gameHistoryArguments === undefined)\n            gameHistoryArguments = this.makeGameHistoryArguments();\n        await wasm;\n        const finalBoard = disambiguate_board(\n            Uint8Array.from(hits),\n            Uint8Array.from(misses),\n            numericSquidsGotten,\n            ...gameHistoryArguments,\n        );\n        if (finalBoard === undefined) {\n            // TODO: Show a proper error message in this case!\n            sendSpywareEvent({\n                kind: 'ambiguousCopyToHistory',\n                grid: this.state.grid,\n                squidsGotten: this.state.squidsGotten,\n                gameHistoryArguments: gameHistoryArguments.map(a => Array.from(a)),\n            });\n            return false;\n        }\n        console.log('Final board:', finalBoard);\n        sendSpywareEvent({kind: 'copyToHistory', squidLayout: finalBoard});\n        const layoutString = this.boardIndexToLayoutString[finalBoard];\n        const observedBoards = gameHistoryArguments[0];\n        let fillIndex = observedBoards.length;\n        // If we're already at capacity then we have to shift the boards over.\n        if (fillIndex === this.layoutDrawingBoardRefs.length) {\n            this.shiftHistory();\n            fillIndex--;\n        }\n        this.layoutDrawingBoardRefs[fillIndex].current.setStateFromLayoutString(layoutString);\n        return true;\n    }\n\n    shiftHistory() {\n        sendSpywareEvent({kind: 'shiftHistory'});\n        const drawingBoards = this.layoutDrawingBoardRefs.map((ref) => ref.current);\n        for (let i = 0; i < drawingBoards.length -1; i++) {\n            drawingBoards[i].setState(drawingBoards[i + 1].state);\n        }\n        drawingBoards[drawingBoards.length - 1].clearBoard();\n    }\n\n    shortcutsHandler(evt) {\n        // Check if the target is an input field that should take precedence over shortcuts.\n        if (evt.target?.getAttribute?.('data-stop-shortcuts'))\n            return;\n\n        if (evt.altKey)\n            return;\n\n        if (evt.ctrlKey) {\n            // Prevent modifying an input when undoing.\n            if (evt.key.toLowerCase() === 'z' && evt.target?.tagName !== \"INPUT\") {\n                evt.preventDefault();\n                this.undoLastMarking();\n            }\n        } else {\n            if (evt.code === 'KeyZ')\n                this.reportMiss();\n            if (evt.code === 'KeyX')\n                this.reportHit();\n            if (evt.code === 'KeyC')\n                this.incrementKills();\n            if (evt.code === 'Space') {\n                this.splitTimer();\n                evt.preventDefault();\n            }\n        }\n    }\n\n    renderActualMap() {\n        return <div style={{justifySelf: 'center'}}>\n            {naturalsUpTo(8).map(\n                (y) => <div key={y} style={{\n                    display: 'flex',\n                }}>\n                    {naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            prob={this.state.probs[[x, y]]}\n                            valid={this.state.valid}\n                            best={this.state.best}\n                            precision={2}\n                        />\n                    )}\n                </div>\n            )}\n        </div>;\n    }\n\n    render() {\n        let usedShots = 0;\n        let openingOptimizer = true;\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                if (this.state.grid[[x, y]] !== null) {\n                    usedShots++;\n                    if (this.state.grid[[x, y]] === 'HIT')\n                        openingOptimizer = false;\n                }\n            }\n        }\n        return <div style={{\n            margin: '20px',\n        }}>\n            <div className=\"container\">\n                <div style={{justifySelf: \"end\", alignSelf: \"start\"}}>\n                    <div className=\"tableContainer\" style={{gridTemplateColumns: \"repeat(2, 1fr)\"}}>\n                        <span><strong>&nbsp;Item&nbsp;</strong></span>\n                        <span><strong>&nbsp;Value&nbsp;</strong></span>\n                        <span>&nbsp;Shots used:&nbsp;</span>\n                        <span>&nbsp;{usedShots}&nbsp;</span>\n                        {this.state.sequenceAware === true && this.state.usingTimer && <>\n                            <BoardTimer ref={this.timerRef} roomEnteredOffset={this.state.roomEnteredOffset} timedTickIntercept={this.state.timedTickIntercept} timedTickRate={this.state.timedTickRate}/>\n                            <span>&nbsp;Last steps:&nbsp;</span>\n                            <span>&nbsp;{this.state.timerStepEstimate === null ? '-' : this.state.timerStepEstimate}&nbsp;</span>\n                        </>}\n                        {this.state.sequenceAware === true && this.state.usingTimer && this.state.showKeyShortcuts && <>\n                            <span><strong>&nbsp;Control&nbsp;</strong></span><span><strong>&nbsp;Shortcut&nbsp;</strong></span>\n                            <span>&nbsp;Start/Split Timer&nbsp;</span><span>&nbsp;Space&nbsp;</span>\n                            <span>&nbsp;Add Reward&nbsp;</span><span>&nbsp;,&nbsp;</span>\n                            <span>&nbsp;Remove Reward&nbsp;</span><span>&nbsp;Shift+,&nbsp;</span>\n                            <span>&nbsp;Invalidate Timer&nbsp;</span><span>&nbsp;;&nbsp;</span>\n                            <span>&nbsp;Reset Timer&nbsp;</span><span>&nbsp;Shift+;&nbsp;</span>\n                        </>}\n                    </div>\n                    {this.state.sequenceAware === true && this.state.usingTimer && <>\n                        <button style={{ fontSize: '120%', margin: '10px' }} onClick={() => { this.setState({showKeyShortcuts: !this.state.showKeyShortcuts}) }}>Toggle Show Shortcuts</button><br/>\n                        <button style={{ fontSize: '120%', margin: '10px' }} onClick={() => { this.setState({spywareMode: !this.state.spywareMode}) }}>{\n                            this.state.spywareMode ? <>Disable Spyware Mode</> : <>Enable Spyware Mode</>\n                        }</button>\n                    </>}\n                </div>\n                {this.renderActualMap()}\n            </div>\n            {!this.state.valid && !this.state.sequenceAware && <div style={{ fontSize: '150%' }}>Invalid configuration! This is not possible.</div>}\n            <br />\n            <div style={{ fontSize: '150%' }}>\n                <span>Number of squids killed:</span>\n                <select\n                    style={{ marginLeft: '20px', fontSize: '100%' }}\n                    value={this.state.squidsGotten}\n                    onChange={(event) => {\n                        this.setState({ squidsGotten: event.target.value });\n                        this.doComputation(this.state.grid, event.target.value);\n                    }}\n                >\n                    {/* In sequence-aware mode don't allow unknown, because it's just an accident waiting to happen for a runner. */}\n                    {\n                        !this.state.sequenceAware &&\n                        <option value=\"unknown\">Unknown</option>\n                    }\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select>\n            </div>\n            <br/>\n            <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.reportMiss(); }}>Miss (z)</button>\n            <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.reportHit(); }}>Hit (x)</button>\n            <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.incrementKills(); }}>Increment Kills (c)</button>\n            {\n                this.state.sequenceAware === true &&\n                <>\n                    <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.shiftHistory(); }}>Shift History</button>\n                </>\n            }\n            <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.clearField(); }}>Reset</button>\n            {\n                !this.state.sequenceAware &&\n                <select\n                    style={{ marginLeft: '20px', fontSize: '150%' }}\n                    value={this.state.mode}\n                    onChange={(event) => this.setState({ mode: event.target.value })}\n                >\n                    <option value=\"calculator\">Calculator Mode</option>\n                    <option value=\"practice\">Practice Mode</option>\n                </select>\n            }\n            {\n                this.state.sequenceAware === true &&\n                <div className='timerModeSelection'>\n                    <span style={{margin: '5px'}}>Timer mode:</span>\n                    <input\n                        type=\"checkbox\"\n                        checked={this.state.usingTimer}\n                        onChange={(event) => this.setState({ usingTimer: !this.state.usingTimer })}\n                    />\n                </div>\n            }\n            <br />\n            {openingOptimizer && this.state.mode === 'calculator' && !this.state.sequenceAware && <>\n                <div style={{ fontSize: '120%', marginTop: '20px' }}>\n                    Opening optimizer: Probability that this<br />pattern would get at least one hit: {\n                        this.state.valid ? ((100 * Math.max(0, 1 - this.state.observationProb)).toFixed(2) + '%') : \"Invalid\"\n                    }\n                </div>\n            </>}\n            <br/>\n            {this.state.sequenceAware === 'initializing' && <div style={{ fontSize: '150%' }}>Downloading table...</div>}\n            {this.state.sequenceAware === true && <>\n                <div>\n                    {this.layoutDrawingBoardRefs.map((ref, i) =>\n                        <LayoutDrawingBoard parent={this} ref={ref} key={i}/>\n                    )}\n                </div>\n                <hr/>\n                <div style={{display:\"grid\", gridTemplateColumns: \"1fr auto 1fr\"}}>\n                    <div id='settings' style={{ gridColumn: \"2\" }}>\n                        <div style={{ gridColumn: \"1 / span 8\" }}>Gaussian RNG step count beliefs (all counts in <i>thousands</i> of steps, except \"Room entered offset\"):</div>\n                        <div>First board mean:     </div><input value={this.state.firstBoardStepsThousands}       onChange={event => this.setState({firstBoardStepsThousands: event.target.value})}/>\n                        <div>First board stddev:   </div><input value={this.state.firstBoardStepsThousandsStdDev} onChange={event => this.setState({firstBoardStepsThousandsStdDev: event.target.value})}/>\n                        <div>Next board mean:      </div><input value={this.state.nextBoardStepsThousands}        onChange={event => this.setState({nextBoardStepsThousands: event.target.value})}/>\n                        <div>Next board stddev:    </div><input value={this.state.nextBoardStepsThousandsStdDev}  onChange={event => this.setState({nextBoardStepsThousandsStdDev: event.target.value})}/>\n                        <div>Timed board stddev:   </div><input value={this.state.timedBoardStepsThousandsStdDev} onChange={event => this.setState({timedBoardStepsThousandsStdDev: event.target.value})}/>\n                        <div>Timed Tick Intercept: </div><input value={this.state.timedTickIntercept}             onChange={event => this.setState({timedTickIntercept: event.target.value})}/>\n                        <div>Timed Tick Rate:      </div><input value={this.state.timedTickRate}                  onChange={event => this.setState({timedTickRate: event.target.value})}/>\n                        <div>Room entered offset:  </div><input value={this.state.roomEnteredOffset}              onChange={event => this.setState({roomEnteredOffset: event.target.value})}/>\n                    </div>\n                </div>\n\n                <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.saveConfigParams(); }}>Save Settings</button> &nbsp;\n                <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.factoryResetConfigParams(); }}>Reset to Defaults</button>\n                <br/>\n\n                <div id='potentialMatches'>\n                    {this.state.potentialMatches?.length === 0 ? <div>No Matches Found!</div>\n                        : this.state.potentialMatches?.map((match, i) => {\n                            const diffs = match.slice(1);\n                            return <div key={i}>\n                                Potential match: {match[0]}{diffs.map((x, i) => <> +{x - match[i]}</>)}\n                            </div>;\n                    })}\n                </div><br/>\n                <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => { this.recomputePotentialMatches(); }}>Find Match Indices</button>\n                <div style={{ fontSize: '150%' }}>Sequence-aware mode initialized.</div>\n            </>}\n            {!this.state.sequenceAware && <div>\n                <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => {\n                    this.loadSequenceTable(false);\n                }}>Initialize Sequence-Aware Mode</button><br/>\n                <button style={{ fontSize: '150%', margin: '10px' }} onClick={() => {\n                    this.loadSequenceTable(true);\n                }}>Initialize Sequence-Aware Mode (big table)</button>\n            </div>}\n\n            {this.state.spywareMode && <><SpywareModeConfiguration /><br/></>}\n\n            <span>Last recompute time: {this.state.lastComputationTime.toFixed(2)}ms</span>\n        </div>;\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return <>\n            <div style={{ display: 'inline-block', width: '600px' }}>\n                <h1>Sploosh Kaboom Probability Calculator</h1>\n                <p>\n                    This is a tool for computing the likely locations of squids in the sploosh kaboom minigame of The Legend of Zelda: The Wind Waker (both SD and HD versions).\n                    Unfortunately it's currently pretty complicated to use correctly.\n                    A collection of tutorials will be compiled at some point, hopefully soon.\n                    For now, see the <a href=\"https://github.com/petersn/web-sploosh-kaboom\">GitHub repository</a>.\n                </p>\n            </div>\n            <MainMap />\n            <span>Made by Peter Schmidt-Nielsen, CryZe, csunday95, and Amphitryon ({VERSION_STRING})</span>\n        </>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}